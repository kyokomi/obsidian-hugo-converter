/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HugoConverterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  gyazoAccessToken: ""
};
var HugoConverterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("Hugo\u30D6\u30ED\u30B0\u306B\u5909\u63DB").setIcon("paper-plane").onClick(async () => {
            await this.convertToHugo(view.file);
          });
        });
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian.TFile && file.extension === "md") {
          menu.addItem((item) => {
            item.setTitle("Hugo\u30D6\u30ED\u30B0\u306B\u5909\u63DB").setIcon("paper-plane").onClick(async () => {
              await this.convertToHugo(file);
            });
          });
        }
      })
    );
    this.addCommand({
      id: "convert-to-hugo",
      name: "Hugo\u30D6\u30ED\u30B0\u306B\u5909\u63DB",
      editorCallback: async (editor, view) => {
        await this.convertToHugo(view.file);
      }
    });
    this.addSettingTab(new HugoConverterSettingTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async convertToHugo(file) {
    if (!file) {
      new import_obsidian.Notice("\u30D5\u30A1\u30A4\u30EB\u304C\u9078\u629E\u3055\u308C\u3066\u3044\u307E\u305B\u3093");
      return;
    }
    try {
      const content = await this.app.vault.read(file);
      new import_obsidian.Notice("\u753B\u50CF\u306E\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u3092\u958B\u59CB\u3057\u307E\u3059...");
      const uploadedImages = await this.uploadImagesToGyazo(content);
      let updatedContent = content;
      if (Object.keys(uploadedImages).length > 0) {
        new import_obsidian.Notice("\u5143\u306E\u8A18\u4E8B\u3092\u66F4\u65B0\u4E2D...");
        await this.updateOriginalFile(file, uploadedImages);
        updatedContent = await this.app.vault.read(file);
        new import_obsidian.Notice("\u8A18\u4E8B\u306E\u66F4\u65B0\u304C\u5B8C\u4E86\u3057\u307E\u3057\u305F");
      }
      new import_obsidian.Notice("Hugo\u5F62\u5F0F\u306B\u5909\u63DB\u4E2D...");
      const converted = await this.convertContent(updatedContent, file.basename);
      const date = new Date();
      const dateStr = date.toISOString().slice(0, 10).replace(/-/g, "");
      const slug = this.generateSlug(file.basename);
      const filename = `${dateStr}01-${slug}.md`;
      const blob = new Blob([converted], { type: "text/markdown" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = filename;
      a.click();
      URL.revokeObjectURL(url);
      new import_obsidian.Notice(`\u5909\u63DB\u5B8C\u4E86: ${filename}`);
    } catch (error) {
      console.error("\u5909\u63DB\u30A8\u30E9\u30FC:", error);
      new import_obsidian.Notice("\u5909\u63DB\u4E2D\u306B\u30A8\u30E9\u30FC\u304C\u767A\u751F\u3057\u307E\u3057\u305F");
    }
  }
  async uploadImagesToGyazo(content) {
    if (!this.settings.gyazoAccessToken) {
      new import_obsidian.Notice("Gyazo\u30A2\u30AF\u30BB\u30B9\u30C8\u30FC\u30AF\u30F3\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093");
      return {};
    }
    const standardImageRegex = /!\[([^\]]*)\]\(([^)]+)\)/g;
    const obsidianImageRegex = /!\[\[([^\]]+)\]\]/g;
    const standardMatches = [...content.matchAll(standardImageRegex)];
    const obsidianMatches = [...content.matchAll(obsidianImageRegex)];
    const uploadedImages = {};
    for (const match of standardMatches) {
      const imagePath = match[2];
      if (imagePath.startsWith("http://") || imagePath.startsWith("https://")) {
        continue;
      }
      try {
        const normalizedPath = imagePath.startsWith("/") ? imagePath.substring(1) : imagePath;
        const imageFile = this.app.vault.getAbstractFileByPath(normalizedPath);
        if (imageFile instanceof import_obsidian.TFile) {
          const arrayBuffer = await this.app.vault.readBinary(imageFile);
          const blob = new Blob([arrayBuffer], { type: `image/${imageFile.extension}` });
          const formData = new FormData();
          formData.append("imagedata", blob);
          formData.append("access_token", this.settings.gyazoAccessToken);
          const response = await fetch("https://upload.gyazo.com/api/upload", {
            method: "POST",
            body: formData
          });
          if (response.ok) {
            const data = await response.json();
            uploadedImages[imagePath] = data.url;
            new import_obsidian.Notice(`\u753B\u50CF\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u5B8C\u4E86: ${imageFile.name}`);
          } else {
            console.error("Gyazo\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u30A8\u30E9\u30FC:", response.statusText);
          }
        }
      } catch (error) {
        console.error("\u753B\u50CF\u51E6\u7406\u30A8\u30E9\u30FC:", error);
      }
    }
    for (const match of obsidianMatches) {
      const imageName = match[1];
      try {
        const possiblePaths = [
          `images/${imageName}`,
          imageName,
          `${imageName}`
        ];
        let imageFile = null;
        for (const path of possiblePaths) {
          const file = this.app.vault.getAbstractFileByPath(path);
          if (file instanceof import_obsidian.TFile) {
            imageFile = file;
            break;
          }
        }
        if (imageFile) {
          const arrayBuffer = await this.app.vault.readBinary(imageFile);
          const blob = new Blob([arrayBuffer], { type: `image/${imageFile.extension}` });
          const formData = new FormData();
          formData.append("imagedata", blob);
          formData.append("access_token", this.settings.gyazoAccessToken);
          const response = await fetch("https://upload.gyazo.com/api/upload", {
            method: "POST",
            body: formData
          });
          if (response.ok) {
            const data = await response.json();
            uploadedImages[`![[${imageName}]]`] = data.url;
            new import_obsidian.Notice(`\u753B\u50CF\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u5B8C\u4E86: ${imageFile.name}`);
          } else {
            console.error("Gyazo\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u30A8\u30E9\u30FC:", response.statusText);
          }
        } else {
          console.error("\u753B\u50CF\u30D5\u30A1\u30A4\u30EB\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093:", imageName);
        }
      } catch (error) {
        console.error("\u753B\u50CF\u51E6\u7406\u30A8\u30E9\u30FC:", error);
      }
    }
    return uploadedImages;
  }
  async updateOriginalFile(file, uploadedImages) {
    try {
      let content = await this.app.vault.read(file);
      let updated = false;
      for (const [oldPath, newUrl] of Object.entries(uploadedImages)) {
        if (oldPath.startsWith("![[")) {
          const newContent = content.replace(oldPath, `![image](${newUrl})`);
          if (newContent !== content) {
            content = newContent;
            updated = true;
          }
        } else {
          const regex = new RegExp(`!\\[([^\\]]*)\\]\\(${oldPath.replace(/[.*+?^${}()|[\]\\]/g, "\\$&")}\\)`, "g");
          const newContent = content.replace(regex, `![$1](${newUrl})`);
          if (newContent !== content) {
            content = newContent;
            updated = true;
          }
        }
      }
      if (updated) {
        await this.app.vault.modify(file, content);
        new import_obsidian.Notice("\u5143\u306E\u8A18\u4E8B\u306E\u753B\u50CFURL\u3092\u66F4\u65B0\u3057\u307E\u3057\u305F");
      }
    } catch (error) {
      console.error("\u5143\u30D5\u30A1\u30A4\u30EB\u306E\u66F4\u65B0\u30A8\u30E9\u30FC:", error);
      new import_obsidian.Notice("\u5143\u30D5\u30A1\u30A4\u30EB\u306E\u66F4\u65B0\u306B\u5931\u6557\u3057\u307E\u3057\u305F");
    }
  }
  convertContent(content, filename) {
    const tagMatches = content.match(/^#\w+(\s+#\w+)*/m);
    const tags = tagMatches ? tagMatches[0].split(/\s+/).map((tag) => tag.substring(1)) : [];
    let cleanContent = content;
    if (tagMatches) {
      cleanContent = content.replace(/^#\w+(\s+#\w+)*\s*\n*/m, "");
    }
    const titleMatch = cleanContent.match(/^#\s+(.+)$/m);
    const title = titleMatch ? titleMatch[1] : filename.replace(/\.md$/, "");
    cleanContent = cleanContent.replace(/\[\[([^\]]+)\]\]/g, (match, p1) => {
      return p1;
    });
    const date = new Date();
    const frontmatter = `---
title: "${title}"
date: ${date.toISOString()}
slug: ${this.generateSlug(filename)}
tags:${tags.length > 0 ? "\n" + tags.map((tag) => `  - ${tag}`).join("\n") : " []"}
draft: false
---`;
    return `${frontmatter}

${cleanContent}`;
  }
  generateSlug(filename) {
    return filename.replace(/\.md$/, "").toLowerCase().replace(/[^\w\s-]/g, "").replace(/\s+/g, "-").replace(/-+/g, "-").trim();
  }
};
var HugoConverterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Hugo Converter \u8A2D\u5B9A" });
    new import_obsidian.Setting(containerEl).setName("Gyazo \u30A2\u30AF\u30BB\u30B9\u30C8\u30FC\u30AF\u30F3").setDesc("Gyazo API\u306E\u30A2\u30AF\u30BB\u30B9\u30C8\u30FC\u30AF\u30F3\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002").addText((text) => text.setPlaceholder("\u30A2\u30AF\u30BB\u30B9\u30C8\u30FC\u30AF\u30F3\u3092\u5165\u529B").setValue(this.plugin.settings.gyazoAccessToken).onChange(async (value) => {
      this.plugin.settings.gyazoAccessToken = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("p", {
      text: "Gyazo\u30A2\u30AF\u30BB\u30B9\u30C8\u30FC\u30AF\u30F3\u306E\u53D6\u5F97\u65B9\u6CD5\uFF1A"
    });
    const ol = containerEl.createEl("ol");
    ol.createEl("li", { text: "https://gyazo.com/oauth/applications \u306B\u30A2\u30AF\u30BB\u30B9" });
    ol.createEl("li", { text: "\u300C\u65B0\u3057\u3044\u30A2\u30D7\u30EA\u30B1\u30FC\u30B7\u30E7\u30F3\u3092\u767B\u9332\u300D\u3092\u30AF\u30EA\u30C3\u30AF" });
    ol.createEl("li", { text: "\u30A2\u30D7\u30EA\u30B1\u30FC\u30B7\u30E7\u30F3\u540D\u3092\u5165\u529B\u3057\u3066\u767B\u9332" });
    ol.createEl("li", { text: "\u751F\u6210\u3055\u308C\u305F\u30A2\u30AF\u30BB\u30B9\u30C8\u30FC\u30AF\u30F3\u3092\u30B3\u30D4\u30FC" });
  }
};
